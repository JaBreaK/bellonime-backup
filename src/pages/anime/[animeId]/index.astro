---
import Layout from "@layouts/Layout.astro";
import WidgetTitle from "@components/WidgetTitle.astro";
import Breadcrumb from "@components/Breadcrumb.astro";
import Sesepuh from "@components/Sesepuh.astro";
import Content from "@components/Content.astro";
import Sidebar from "@components/Sidebar.astro"; // (opsional, kalau mau pakai Sidebar bawaan)
import animeConfig from "@configs/animeConfig";
import animeInfoService from "@services/animeInfoService";
import generateUrlPath from "@utils/generateUrlPath";
import PlayIcon from "@components/icons/PlayIcon.astro";
import StarIcon from "@components/icons/StarIcon.astro";
import AnimeDetails from "@components/AnimeDetails.astro";
import Error from "@components/Error.astro";

const {
  bellonime: { siteName },
} = animeConfig;
const { animeId } = Astro.params;
const animeInfo = await animeInfoService({ animeId: animeId! });
const { data } = animeInfo;
---


<style>
 
</style>

{() => {
  if (animeInfo.ok) {
    const title = `Anime ${data.title} - ${siteName}`;

    return (
      <Layout
        seo={{
          title,
          description: data.synopsis.paragraphs[0],
        }}
      >
        <Breadcrumb
          currentPage={{
            title: data.title,
            href: Astro.url.href,
            action: "replace",
          }}
        />
        <Sesepuh>
          <Content>
            {/* Bagian Header Gambar & Judul */}
            <div class="relative slide-in-top">
              <img
                src={data.poster}
                class="w-full aspect-[16/6] object-cover rounded-t-md"
                alt={data.title}
              />
              <div class="absolute top-0 right-0 bottom-0 left-0 rounded-t-md bg-gradient-to-t from-zinc-100 dark:from-zinc-900 to-transparent" />
            </div>

            <div class="flex flex-col sm:flex-row justify-center items-center sm:justify-start gap-4 sm:items-end xs:-mt-[100px] sm:-mt-[150px] relative p-4 slide-in-left delay-1">
              <img
                src={data.poster}
                alt={data.title}
                class="w-[150px] sm:w-[170px] md:w-[200px] rounded-md aspect-[3/4]"
              />
              <div class="flex flex-col gap-3 items-center text-center sm:items-start sm:text-left">
                <h1 class="text-xl md:text-2xl font-extrabold line-clamp-2">
                  {data.title || data.synonyms}
                </h1>
                <p class="flex">
                  <span class="flex gap-1 items-center">
                    <StarIcon class="w-4 h-4" />
                    {data.score.value} {data.score.users && `/ ${data.score.users}`} | {data.status}
                  </span>
                </p>
                <a
                  href={generateUrlPath(
                    "/episode",
                    data.episodeList[data.episodeList.length - 1].episodeId
                  )}
                  class="max-w-min flex gap-1 text-white bg-pink-700 hover:bg-pink-800 focus:outline-none focus:ring-4 focus:ring-pink-300 font-medium rounded-full text-sm px-5 py-2.5 text-center dark:bg-pink-600 dark:hover:bg-pink-700 dark:focus:ring-pink-800"
                >
                  <PlayIcon />
                  Tonton
                </a>
              </div>
            </div>

            {/* Grid 2 Kolom: Konten Utama di kiri, Daftar Episode di kanan */}
            <div class="mt-6 grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Kolom Kiri: konten utama */}
                            <aside class="lg:col-span-1 slide-in-right delay-1">
                <WidgetTitle title="Daftar Episode" />
                <div class="flex flex-col gap-2 max-h-[600px] overflow-y-auto">
                  {data.episodeList.map((episode, index) => {
                    const linkHref = generateUrlPath("/episode", episode.episodeId);
                    const delayClass = `animate-in delay-${Math.min(3, Math.floor(index/5) + 1)}`;
                    
                    if (episode.title) {
                      return (
                        <a
                          href={linkHref}
                          class={`episode-item flex gap-3 items-center hover:bg-zinc-100 dark:hover:bg-zinc-800 p-2 rounded-md transition ${delayClass}`}
                        >
                          <div class="text-white py-1 px-3 bg-sky-700 dark:bg-sky-600 rounded-sm text-sm">
                            {episode.title}
                          </div>
                          <div class="text-sm line-clamp-1">
                            {data.title} Episode {episode.title}
                          </div>
                        </a>
                      );
                    }
                    return (
                      <a
                        href={linkHref}
                        class={`episode-item flex gap-3 items-center hover:bg-zinc-100 dark:hover:bg-zinc-800 p-2 rounded-md transition ${delayClass}`}
                      >
                        <div class="py-1 px-3 bg-sky-700 dark:bg-sky-600 rounded-sm text-sm text-white">
                          {data.type}
                        </div>
                        <div class="text-sm">Tonton {data.title}</div>
                      </a>
                    );
                  })}
                </div>
              </aside>
              <div class="lg:col-span-2 flex flex-col gap-4">
                {/* Sinopsis */}
                <div class="flex flex-col gap-3 animate-in delay-2">
                  {data.synopsis.paragraphs.map((paragraph) => (
                    <p class="text-zinc-600 dark:text-zinc-400">{paragraph}</p>
                  ))}
                  <div class="flex flex-col">
                    {data.synopsis.connections?.map((conn) => (
                      <a
                        href={generateUrlPath("/anime", conn.animeId)}
                        class="text-blue-600 dark:text-blue-400"
                      >
                        {conn.title}
                      </a>
                    ))}
                  </div>
                </div>

                {/* Detail Anime */}
                <WidgetTitle title="Detail Anime" class="animate-in delay-2" />
                <AnimeDetails anime={data} class="animate-in delay-2" />

                {/* Download Batch (jika ada) */}
                {data.batch && (
                  <div class="animate-in delay-2">
                    <WidgetTitle title="Download Batch" />
                    <a
                      href={generateUrlPath("/batch", data.batch.batchId)}
                      class="line-clamp-2 flex gap-1 text-white bg-pink-700 hover:bg-pink-800 focus:outline-none focus:ring-4 focus:ring-pink-300 font-medium rounded-md text-sm px-5 py-2.5 text-center dark:bg-pink-600 dark:hover:bg-pink-700 dark:focus:ring-pink-800"
                      rel="noopener"
                    >
                      {data.batch.title.replace(/otakudesu/gi, "").trim()}
                    </a>
                  </div>
                )}

                {/* Trailer (jika ada) */}
                {data.trailer && (
                  <div class="mt-4 animate-in delay-3">
                    <iframe
                      src={data.trailer}
                      allowfullscreen
                      class="w-full aspect-video rounded-lg"
                    />
                  </div>
                )}
              </div>

              {/* Kolom Kanan: Daftar Episode */}

            </div>
          </Content>
        </Sesepuh>
      </Layout>
    );
  }

  return (
    <Error
      statusCode={animeInfo.statusCode}
      message={animeInfo.message || animeInfo.statusMessage}
    />
  );
}}