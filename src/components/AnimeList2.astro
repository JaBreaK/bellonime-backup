---
import generateUrlPath from "@utils/generateUrlPath";
import StarIcon from "./icons/StarIcon.astro";

interface Props {
  anime: {
    list: AnimeCard2[];
    baseUrlPath: string;
  };
}
 
const {
  anime: { list, baseUrlPath },
} = Astro.props;
---

<div>
  <!-- 1) SKELETON PLACEHOLDER: Grid kotak abu-abu berkedip -->
  <div
    id="skeleton-grid2"
    class="py-3 gap-4 grid xs:grid-cols-2 sm:grid-cols-3 md:grid-cols-5"
  >
    {Array.from({ length: 5 }).map((_, i) => (
      <div
        key={i}
        class="h-64 bg-gray-200 rounded-lg animate-pulse"
      />
    ))}
  </div>

<div 
id="anime-grid2"
class="hidden py-3 gap-4 grid xs:grid-cols-2 sm:grid-cols-3 md:grid-cols-5">
  {
    list.map((anime) => (
      <>
        <a
          href={generateUrlPath(
            baseUrlPath,
            anime.animeId || anime.batchId || ""
          )}
          class="anime-item2 group rounded-lg relative opacity-0 translate-y-4 
               transform transition-opacity transition-transform duration-500"
        >
          <div class="relative">
            <img
              loading="lazy"
              class="anime2-item-img"
              src={anime.poster}
              alt={anime.title}
            />
            <span class="anime2-item-type">{anime.episodes}</span>
            <span class="anime2-item-score">
              <StarIcon class="w-[12px] h-[12px]" />
              <span>{anime.score}</span>
            </span>
            <span class="anime2-item-status">{anime.lastReleaseDate}</span>
          </div>
          <div class="p-2">
            <h3 class="anime2-item-title">{anime.title}</h3>
          </div>
        </a>
        {/* <div class="hidden">
          {anime.genreList.map((genre) => (
            <a href={generateUrlPath("/genres", genre.genreId)}>
              {genre.title}
            </a>
          ))}
        </div> */}
      </>
    ))
  }
</div>

<script is:inline>
  function toggleAnimasibatch() {
    const skeleton = document.getElementById("skeleton-grid2");
    const grid     = document.getElementById("anime-grid2");

    // Simulasi “loading data” selama 1 detik
    setTimeout(() => {
      // (1) Sembunyikan skeleton
      if (skeleton) skeleton.style.display = "none";

      // (2) Tampilkan grid anime
      if (grid) grid.classList.remove("hidden");

      // (3) Munculkan tiap item dengan delay berurutan (staggered)
      const items = grid.querySelectorAll(".anime-item2");
      items.forEach((el, idx) => {
        setTimeout(() => {
          el.classList.add("opacity-100");
          el.classList.remove("translate-y-4");
        }, idx * 100);
      });
    }, 1000);
  }

  // Daftarkan listener pada turbo:load
  document.addEventListener("turbo:load", toggleAnimasibatch);
</script>